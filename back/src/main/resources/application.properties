#Google Cloud
google.cloud.project.id=${project-id}
google.cloud.location=asia-northeast3

#Google Gemini 모델 설정
google.gemini.model-name=gemini-2.5-flash

# Google Cloud Storage 설정
gcp.storage.bucket-name=${bucket-name}

#Vision 경로 설정
gcp.vision.key-file-path=classpath:${file-name}.json

#google Oauth 토큰 저장 로컬 폴더 경로
google.credentials.folder=${folder-path}

# oauth2 logout 후 리다이렉트 url 설정
app.oauth.logout-redirect-uri="{server-url}"

# 디버그 
logging.level.root=INFO
logging.level.org.springframework.security=TRACE
logging.level.com.server.back.infrastructure=DEBUG

# record int 설정
app.status=1

# multpart 설정
spring.servlet.multpart.location=/tmp/spring-multipart-temp
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=11MB
spring.servlet.multipart.file-size-threshold=2MB

#http
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
#http

# SMTP 설정
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${admin-email}
spring.mail.password=${password}
spring.mail.properties.mail.smtp=true
spring.mail.properties.mail.smtp.starttls.enable=true

# mysql 
spring.datasource.username=${mysql-user-name}
spring.datasource.password=${password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# redis
spring.data.redis.host=redis
spring.data.redis.port=6379
spring.data.redis.timeout=2s
spring.data.redis.password=${password}

#logging
logging.level.org.springframework.data.redis=DEBUG
logging.level.io.lettuce.core=DEBUG

# jpa
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

logging.level.org.hibernate.SQL: debug
logging.level.org.hibernate.orm.jdbc.bind: trace

jwt.secret=${secret-key}


# kakao
spring.security.oauth2.client.registration.kakao.client-id=${client-id}
spring.security.oauth2.client.registration.kakao.client-secret=${client-secret}
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/{redirect-uri}
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.client-name=Kakao

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# naver
spring.security.oauth2.client.registration.naver.client-id=${client-id}
spring.security.oauth2.client.registration.naver.client-secret=${client-secret}
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{redirect-uri}
spring.security.oauth2.client.registration.naver.client-name=Naver

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# google
spring.security.oauth2.client.registration.google.client-id=${client-id}
spring.security.oauth2.client.registration.google.client-secret=${client-secret}
spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/gmail.readonly
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/{redirect-uri}
spring.security.oauth2.client.registration.google.client-name=Google